From 63bdcaa2d92bf5dba4dab23abb4e2b811e565438 Mon Sep 17 00:00:00 2001
From: Ralf Jung <post@ralfj.de>
Date: Wed, 12 Jun 2024 15:19:40 +0200
Subject: [PATCH 1/2] add is_none_or

---
library/core/src/option.rs | 26 ++++++++++++++++++++++++++
1 file changed, 26 insertions(+)

diff --git a/library/core/src/option.rs b/library/core/src/option.rs
index e253cfd2822be..d90b9cdb4b5c8 100644
--- a/library/core/src/option.rs
+++ b/library/core/src/option.rs
@@ -654,31 +654,31 @@ impl<T> Option<T> {
!self.is_some()
}

+    /// Returns `true` if the option is a [`None`] or the value inside of it matches a predicate.
+    ///
+    /// # Examples
+    ///
+    /// ```
+    /// #![feature(is_none_or)]
+    ///
+    /// let x: Option<u32> = Some(2);
+    /// assert_eq!(x.is_none_or(|x| x > 1), true);
+    ///
+    /// let x: Option<u32> = Some(0);
+    /// assert_eq!(x.is_none_or(|x| x > 1), false);
+    ///
+    /// let x: Option<u32> = None;
+    /// assert_eq!(x.is_none_or(|x| x > 1), true);
+    /// ```
+    #[must_use]
+    #[inline]
+    #[unstable(feature = "is_none_or", issue = "none")]
+    pub fn is_none_or(self, f: impl FnOnce(T) -> bool) -> bool {
+        match self {
+            None => true,
+            Some(x) => f(x),
+        }
+    }
+
/////////////////////////////////////////////////////////////////////////
// Adapter for working with references
/////////////////////////////////////////////////////////////////////////

From 4c208ac233df3b57f48298d5a911354fe8189320 Mon Sep 17 00:00:00 2001
From: Ralf Jung <post@ralfj.de>
Date: Wed, 12 Jun 2024 15:22:23 +0200
Subject: [PATCH 2/2] use is_none_or in some places in the compiler

---